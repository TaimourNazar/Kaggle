{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":34377,"databundleVersionId":3220602,"sourceType":"competition"}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/taimour/ensemble-7-models-stackingcvregressor-titanic?scriptVersionId=194812471\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"![](https://i.postimg.cc/43CDn4kd/pexels-pixabay-2166.jpg)","metadata":{}},{"cell_type":"markdown","source":"# Understanding Data, Files and Goals","metadata":{}},{"cell_type":"markdown","source":"**Data Fields**\n\n**PassengerId:** A unique identifier for each passenger.\n\n**HomePlanet:** The planet the passenger is from.\n\n**CryoSleep:** Whether the passenger was put into suspended animation during the journey.\n\n**Cabin:** The location of the passenger's cabin on the ship.\n\n**Destination:** The planet the passenger is traveling to.\n\n**Age:** The age of the passenger.\n\n**VIP:** Indicates if the passenger has VIP status.\n\n**RoomService:** Amount spent for room service\n\n**FoodCourt:** Amount spent in food court\n\n**ShoppingMall:** Amount spent in shopping mall\n\n**Spa:** Amount spent in spa\n\n**VRDeck:** Amount spent for VRDeck\n\n**Name:** The passenger's name.\n\n**Transported:** The target variable indicating whether the passenger was transported.\n\n\n**Files**\n\nThe **train.csv** file contains data for training a machine learning model to predict transportation.\n\nThe **test.csv** file contains data for testing the model's performance on unseen data.\n\nThe **sample_submission.csv** file is a template for submitting predictions.\n\n\n\n**Goals**\n\n**train.csv** and **test.csv** contain passenger data from a spaceship journey. The goal is to predict whether a passenger was \"transported\" to another dimension based on various personal details.\n\nThe **Transported column** is the target variable to predict.\n\nBy analyzing these features and their relationships, we can build a model to accurately predict whether a passenger will be transported or not.","metadata":{}},{"cell_type":"markdown","source":"# Import Libraries","metadata":{}},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import ElasticNetCV,LassoCV,RidgeCV\nfrom sklearn.svm import SVR\nfrom mlxtend.regressor import StackingCVRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom datetime import datetime\nfrom sklearn.model_selection import KFold\nfrom category_encoders.target_encoder import TargetEncoder\n\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-31T15:54:46.522137Z","iopub.execute_input":"2024-08-31T15:54:46.523247Z","iopub.status.idle":"2024-08-31T15:54:46.531193Z","shell.execute_reply.started":"2024-08-31T15:54:46.523198Z","shell.execute_reply":"2024-08-31T15:54:46.5298Z"},"trusted":true},"execution_count":75,"outputs":[]},{"cell_type":"markdown","source":"# Load and View Data","metadata":{}},{"cell_type":"code","source":"X_train=pd.read_csv(\"/kaggle/input/spaceship-titanic/train.csv\", index_col='PassengerId')\ntest=pd.read_csv(\"/kaggle/input/spaceship-titanic/test.csv\", index_col='PassengerId')\n\n#Training data\nX_train.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:46.564178Z","iopub.execute_input":"2024-08-31T15:54:46.564594Z","iopub.status.idle":"2024-08-31T15:54:46.65154Z","shell.execute_reply.started":"2024-08-31T15:54:46.564554Z","shell.execute_reply":"2024-08-31T15:54:46.650361Z"},"trusted":true},"execution_count":76,"outputs":[{"execution_count":76,"output_type":"execute_result","data":{"text/plain":"            HomePlanet CryoSleep  Cabin  Destination   Age    VIP  \\\nPassengerId                                                         \n0001_01         Europa     False  B/0/P  TRAPPIST-1e  39.0  False   \n0002_01          Earth     False  F/0/S  TRAPPIST-1e  24.0  False   \n0003_01         Europa     False  A/0/S  TRAPPIST-1e  58.0   True   \n0003_02         Europa     False  A/0/S  TRAPPIST-1e  33.0  False   \n0004_01          Earth     False  F/1/S  TRAPPIST-1e  16.0  False   \n\n             RoomService  FoodCourt  ShoppingMall     Spa  VRDeck  \\\nPassengerId                                                         \n0001_01              0.0        0.0           0.0     0.0     0.0   \n0002_01            109.0        9.0          25.0   549.0    44.0   \n0003_01             43.0     3576.0           0.0  6715.0    49.0   \n0003_02              0.0     1283.0         371.0  3329.0   193.0   \n0004_01            303.0       70.0         151.0   565.0     2.0   \n\n                          Name  Transported  \nPassengerId                                  \n0001_01        Maham Ofracculy        False  \n0002_01           Juanna Vines         True  \n0003_01          Altark Susent        False  \n0003_02           Solam Susent        False  \n0004_01      Willy Santantines         True  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HomePlanet</th>\n      <th>CryoSleep</th>\n      <th>Cabin</th>\n      <th>Destination</th>\n      <th>Age</th>\n      <th>VIP</th>\n      <th>RoomService</th>\n      <th>FoodCourt</th>\n      <th>ShoppingMall</th>\n      <th>Spa</th>\n      <th>VRDeck</th>\n      <th>Name</th>\n      <th>Transported</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0001_01</th>\n      <td>Europa</td>\n      <td>False</td>\n      <td>B/0/P</td>\n      <td>TRAPPIST-1e</td>\n      <td>39.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Maham Ofracculy</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>0002_01</th>\n      <td>Earth</td>\n      <td>False</td>\n      <td>F/0/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>24.0</td>\n      <td>False</td>\n      <td>109.0</td>\n      <td>9.0</td>\n      <td>25.0</td>\n      <td>549.0</td>\n      <td>44.0</td>\n      <td>Juanna Vines</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>0003_01</th>\n      <td>Europa</td>\n      <td>False</td>\n      <td>A/0/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>58.0</td>\n      <td>True</td>\n      <td>43.0</td>\n      <td>3576.0</td>\n      <td>0.0</td>\n      <td>6715.0</td>\n      <td>49.0</td>\n      <td>Altark Susent</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>0003_02</th>\n      <td>Europa</td>\n      <td>False</td>\n      <td>A/0/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>33.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>1283.0</td>\n      <td>371.0</td>\n      <td>3329.0</td>\n      <td>193.0</td>\n      <td>Solam Susent</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>0004_01</th>\n      <td>Earth</td>\n      <td>False</td>\n      <td>F/1/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>16.0</td>\n      <td>False</td>\n      <td>303.0</td>\n      <td>70.0</td>\n      <td>151.0</td>\n      <td>565.0</td>\n      <td>2.0</td>\n      <td>Willy Santantines</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#Testing data\ntest.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:46.653668Z","iopub.execute_input":"2024-08-31T15:54:46.654098Z","iopub.status.idle":"2024-08-31T15:54:46.676924Z","shell.execute_reply.started":"2024-08-31T15:54:46.654054Z","shell.execute_reply":"2024-08-31T15:54:46.675712Z"},"trusted":true},"execution_count":77,"outputs":[{"execution_count":77,"output_type":"execute_result","data":{"text/plain":"            HomePlanet CryoSleep  Cabin  Destination   Age    VIP  \\\nPassengerId                                                         \n0013_01          Earth      True  G/3/S  TRAPPIST-1e  27.0  False   \n0018_01          Earth     False  F/4/S  TRAPPIST-1e  19.0  False   \n0019_01         Europa      True  C/0/S  55 Cancri e  31.0  False   \n0021_01         Europa     False  C/1/S  TRAPPIST-1e  38.0  False   \n0023_01          Earth     False  F/5/S  TRAPPIST-1e  20.0  False   \n\n             RoomService  FoodCourt  ShoppingMall     Spa  VRDeck  \\\nPassengerId                                                         \n0013_01              0.0        0.0           0.0     0.0     0.0   \n0018_01              0.0        9.0           0.0  2823.0     0.0   \n0019_01              0.0        0.0           0.0     0.0     0.0   \n0021_01              0.0     6652.0           0.0   181.0   585.0   \n0023_01             10.0        0.0         635.0     0.0     0.0   \n\n                         Name  \nPassengerId                    \n0013_01       Nelly Carsoning  \n0018_01        Lerome Peckers  \n0019_01       Sabih Unhearfus  \n0021_01      Meratz Caltilter  \n0023_01       Brence Harperez  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HomePlanet</th>\n      <th>CryoSleep</th>\n      <th>Cabin</th>\n      <th>Destination</th>\n      <th>Age</th>\n      <th>VIP</th>\n      <th>RoomService</th>\n      <th>FoodCourt</th>\n      <th>ShoppingMall</th>\n      <th>Spa</th>\n      <th>VRDeck</th>\n      <th>Name</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0013_01</th>\n      <td>Earth</td>\n      <td>True</td>\n      <td>G/3/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>27.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Nelly Carsoning</td>\n    </tr>\n    <tr>\n      <th>0018_01</th>\n      <td>Earth</td>\n      <td>False</td>\n      <td>F/4/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>19.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>9.0</td>\n      <td>0.0</td>\n      <td>2823.0</td>\n      <td>0.0</td>\n      <td>Lerome Peckers</td>\n    </tr>\n    <tr>\n      <th>0019_01</th>\n      <td>Europa</td>\n      <td>True</td>\n      <td>C/0/S</td>\n      <td>55 Cancri e</td>\n      <td>31.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Sabih Unhearfus</td>\n    </tr>\n    <tr>\n      <th>0021_01</th>\n      <td>Europa</td>\n      <td>False</td>\n      <td>C/1/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>38.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>6652.0</td>\n      <td>0.0</td>\n      <td>181.0</td>\n      <td>585.0</td>\n      <td>Meratz Caltilter</td>\n    </tr>\n    <tr>\n      <th>0023_01</th>\n      <td>Earth</td>\n      <td>False</td>\n      <td>F/5/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>20.0</td>\n      <td>False</td>\n      <td>10.0</td>\n      <td>0.0</td>\n      <td>635.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Brence Harperez</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Check Null Values in Data","metadata":{}},{"cell_type":"markdown","source":"First check Null values in target column. If there is any Null value then we will drop that row","metadata":{}},{"cell_type":"code","source":"null_values = X_train[\"Transported\"].isnull().sum()\nnull_values","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:46.678521Z","iopub.execute_input":"2024-08-31T15:54:46.678917Z","iopub.status.idle":"2024-08-31T15:54:46.690607Z","shell.execute_reply.started":"2024-08-31T15:54:46.678876Z","shell.execute_reply":"2024-08-31T15:54:46.689468Z"},"trusted":true},"execution_count":78,"outputs":[{"execution_count":78,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"markdown","source":"Good news, we don't have any row with Null value in target column.\n\nNext lets calculate percentage of Null values in train and test data.","metadata":{}},{"cell_type":"code","source":"def null_percent(df):\n    per=((df.isnull().sum()/len(df))*100).round(2)\n    return per\nprint(\"Nan Values in Train data\")\nprint(null_percent(X_train))\nprint(\"Nan Values in Test data\")\nprint(null_percent(test))","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:46.692784Z","iopub.execute_input":"2024-08-31T15:54:46.69327Z","iopub.status.idle":"2024-08-31T15:54:46.721342Z","shell.execute_reply.started":"2024-08-31T15:54:46.693226Z","shell.execute_reply":"2024-08-31T15:54:46.719809Z"},"trusted":true},"execution_count":79,"outputs":[{"name":"stdout","text":"Nan Values in Train data\nHomePlanet      2.31\nCryoSleep       2.50\nCabin           2.29\nDestination     2.09\nAge             2.06\nVIP             2.34\nRoomService     2.08\nFoodCourt       2.11\nShoppingMall    2.39\nSpa             2.11\nVRDeck          2.16\nName            2.30\nTransported     0.00\ndtype: float64\nNan Values in Test data\nHomePlanet      2.03\nCryoSleep       2.17\nCabin           2.34\nDestination     2.15\nAge             2.13\nVIP             2.17\nRoomService     1.92\nFoodCourt       2.48\nShoppingMall    2.29\nSpa             2.36\nVRDeck          1.87\nName            2.20\ndtype: float64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Data Preprocessing","metadata":{}},{"cell_type":"markdown","source":"Our target column Transported is boolean i.e True and False, lets convert it to 1 and 0 for using in our models.","metadata":{}},{"cell_type":"code","source":"X_train['Transported'] = X_train['Transported'].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:46.723367Z","iopub.execute_input":"2024-08-31T15:54:46.723865Z","iopub.status.idle":"2024-08-31T15:54:46.731308Z","shell.execute_reply.started":"2024-08-31T15:54:46.723824Z","shell.execute_reply":"2024-08-31T15:54:46.730246Z"},"trusted":true},"execution_count":80,"outputs":[]},{"cell_type":"code","source":"X_train.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:46.761266Z","iopub.execute_input":"2024-08-31T15:54:46.761715Z","iopub.status.idle":"2024-08-31T15:54:46.786682Z","shell.execute_reply.started":"2024-08-31T15:54:46.761673Z","shell.execute_reply":"2024-08-31T15:54:46.785323Z"},"trusted":true},"execution_count":81,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 8693 entries, 0001_01 to 9280_02\nData columns (total 13 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   HomePlanet    8492 non-null   object \n 1   CryoSleep     8476 non-null   object \n 2   Cabin         8494 non-null   object \n 3   Destination   8511 non-null   object \n 4   Age           8514 non-null   float64\n 5   VIP           8490 non-null   object \n 6   RoomService   8512 non-null   float64\n 7   FoodCourt     8510 non-null   float64\n 8   ShoppingMall  8485 non-null   float64\n 9   Spa           8510 non-null   float64\n 10  VRDeck        8505 non-null   float64\n 11  Name          8493 non-null   object \n 12  Transported   8693 non-null   int64  \ndtypes: float64(6), int64(1), object(6)\nmemory usage: 950.8+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"#Name doesn't contribute in prediction, lets drop it\nX_train.drop(['Name'],axis=1,inplace=True)\ntest.drop(['Name'],axis=1,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:46.806061Z","iopub.execute_input":"2024-08-31T15:54:46.806874Z","iopub.status.idle":"2024-08-31T15:54:46.815631Z","shell.execute_reply.started":"2024-08-31T15:54:46.806827Z","shell.execute_reply":"2024-08-31T15:54:46.814518Z"},"trusted":true},"execution_count":82,"outputs":[]},{"cell_type":"code","source":"#Separate categorical and numerical columns for filling empty columns\n#For categorical columns we will use mode\n#For numerical columns we will use median\n\ncategorical_col_train=[col for col in X_train.columns if X_train[col].dtype=='O']\nnumerical_col_train=[col for col in X_train.columns if X_train[col].dtype!='O']\n\ncategorical_col_test=[col for col in test.columns if test[col].dtype=='O']\nnumerical_col_test=[col for col in test.columns if test[col].dtype!='O']\n\nfor col in categorical_col_train:\n    X_train[col].fillna(X_train[col].mode()[0],inplace=True)\nfor col in numerical_col_train:\n    X_train[col].fillna(X_train[col].median(),inplace=True)\n\nfor col in categorical_col_test:\n    test[col].fillna(test[col].mode()[0],inplace=True)\nfor col in numerical_col_test:\n    test[col].fillna(test[col].median(),inplace=True)\n\n#Now check the Null percentage again\nprint(\"Nan Values in Train data\")\nprint(null_percent(X_train))\nprint(\"Nan Values in Test data\")\nprint(null_percent(test))","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:46.846518Z","iopub.execute_input":"2024-08-31T15:54:46.846954Z","iopub.status.idle":"2024-08-31T15:54:46.916294Z","shell.execute_reply.started":"2024-08-31T15:54:46.846911Z","shell.execute_reply":"2024-08-31T15:54:46.915086Z"},"trusted":true},"execution_count":83,"outputs":[{"name":"stdout","text":"Nan Values in Train data\nHomePlanet      0.0\nCryoSleep       0.0\nCabin           0.0\nDestination     0.0\nAge             0.0\nVIP             0.0\nRoomService     0.0\nFoodCourt       0.0\nShoppingMall    0.0\nSpa             0.0\nVRDeck          0.0\nTransported     0.0\ndtype: float64\nNan Values in Test data\nHomePlanet      0.0\nCryoSleep       0.0\nCabin           0.0\nDestination     0.0\nAge             0.0\nVIP             0.0\nRoomService     0.0\nFoodCourt       0.0\nShoppingMall    0.0\nSpa             0.0\nVRDeck          0.0\ndtype: float64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Data Encoding","metadata":{}},{"cell_type":"code","source":"encoder  = TargetEncoder()\nfor feature in categorical_col_test:\n    X_train[feature] = encoder.fit_transform(X_train[feature], X_train['Transported'])\n    test[feature] = encoder.transform(test[feature])\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:46.918831Z","iopub.execute_input":"2024-08-31T15:54:46.91936Z","iopub.status.idle":"2024-08-31T15:54:47.030236Z","shell.execute_reply.started":"2024-08-31T15:54:46.919304Z","shell.execute_reply":"2024-08-31T15:54:47.029075Z"},"trusted":true},"execution_count":84,"outputs":[{"name":"stdout","text":"Warning: No categorical columns found. Calling 'transform' will only return input data.\nWarning: No categorical columns found. Calling 'transform' will only return input data.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"View Data after encoding","metadata":{}},{"cell_type":"code","source":"X_train.head(3)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:47.0316Z","iopub.execute_input":"2024-08-31T15:54:47.031931Z","iopub.status.idle":"2024-08-31T15:54:47.052642Z","shell.execute_reply.started":"2024-08-31T15:54:47.031894Z","shell.execute_reply":"2024-08-31T15:54:47.051329Z"},"trusted":true},"execution_count":85,"outputs":[{"execution_count":85,"output_type":"execute_result","data":{"text/plain":"             HomePlanet  CryoSleep     Cabin  Destination   Age    VIP  \\\nPassengerId                                                              \n0001_01        0.658846      False  0.438098     0.472199  39.0  False   \n0002_01        0.427649      False  0.568206     0.472199  24.0  False   \n0003_01        0.658846      False  0.432184     0.472199  58.0   True   \n\n             RoomService  FoodCourt  ShoppingMall     Spa  VRDeck  Transported  \nPassengerId                                                                     \n0001_01              0.0        0.0           0.0     0.0     0.0            0  \n0002_01            109.0        9.0          25.0   549.0    44.0            1  \n0003_01             43.0     3576.0           0.0  6715.0    49.0            0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HomePlanet</th>\n      <th>CryoSleep</th>\n      <th>Cabin</th>\n      <th>Destination</th>\n      <th>Age</th>\n      <th>VIP</th>\n      <th>RoomService</th>\n      <th>FoodCourt</th>\n      <th>ShoppingMall</th>\n      <th>Spa</th>\n      <th>VRDeck</th>\n      <th>Transported</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0001_01</th>\n      <td>0.658846</td>\n      <td>False</td>\n      <td>0.438098</td>\n      <td>0.472199</td>\n      <td>39.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>0002_01</th>\n      <td>0.427649</td>\n      <td>False</td>\n      <td>0.568206</td>\n      <td>0.472199</td>\n      <td>24.0</td>\n      <td>False</td>\n      <td>109.0</td>\n      <td>9.0</td>\n      <td>25.0</td>\n      <td>549.0</td>\n      <td>44.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>0003_01</th>\n      <td>0.658846</td>\n      <td>False</td>\n      <td>0.432184</td>\n      <td>0.472199</td>\n      <td>58.0</td>\n      <td>True</td>\n      <td>43.0</td>\n      <td>3576.0</td>\n      <td>0.0</td>\n      <td>6715.0</td>\n      <td>49.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test.head(3)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:47.055525Z","iopub.execute_input":"2024-08-31T15:54:47.055912Z","iopub.status.idle":"2024-08-31T15:54:47.077084Z","shell.execute_reply.started":"2024-08-31T15:54:47.055872Z","shell.execute_reply":"2024-08-31T15:54:47.075795Z"},"trusted":true},"execution_count":86,"outputs":[{"execution_count":86,"output_type":"execute_result","data":{"text/plain":"             HomePlanet  CryoSleep     Cabin  Destination   Age    VIP  \\\nPassengerId                                                              \n0013_01        0.427649       True  0.503624     0.472199  27.0  False   \n0018_01        0.427649      False  0.503624     0.472199  19.0  False   \n0019_01        0.658846       True  0.503624     0.610000  31.0  False   \n\n             RoomService  FoodCourt  ShoppingMall     Spa  VRDeck  \nPassengerId                                                        \n0013_01              0.0        0.0           0.0     0.0     0.0  \n0018_01              0.0        9.0           0.0  2823.0     0.0  \n0019_01              0.0        0.0           0.0     0.0     0.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HomePlanet</th>\n      <th>CryoSleep</th>\n      <th>Cabin</th>\n      <th>Destination</th>\n      <th>Age</th>\n      <th>VIP</th>\n      <th>RoomService</th>\n      <th>FoodCourt</th>\n      <th>ShoppingMall</th>\n      <th>Spa</th>\n      <th>VRDeck</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0013_01</th>\n      <td>0.427649</td>\n      <td>True</td>\n      <td>0.503624</td>\n      <td>0.472199</td>\n      <td>27.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>0018_01</th>\n      <td>0.427649</td>\n      <td>False</td>\n      <td>0.503624</td>\n      <td>0.472199</td>\n      <td>19.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>9.0</td>\n      <td>0.0</td>\n      <td>2823.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>0019_01</th>\n      <td>0.658846</td>\n      <td>True</td>\n      <td>0.503624</td>\n      <td>0.610000</td>\n      <td>31.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Separate Target Column","metadata":{}},{"cell_type":"code","source":"#Separate target column from data\ny=X_train.Transported\nX_train.drop(['Transported'],axis=1,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:47.078479Z","iopub.execute_input":"2024-08-31T15:54:47.078898Z","iopub.status.idle":"2024-08-31T15:54:47.087517Z","shell.execute_reply.started":"2024-08-31T15:54:47.078859Z","shell.execute_reply":"2024-08-31T15:54:47.086197Z"},"trusted":true},"execution_count":87,"outputs":[]},{"cell_type":"markdown","source":"# Pipelines and Models","metadata":{}},{"cell_type":"code","source":"# Set a random seed for reproducibility\nSEED = 40\n\n# Define the number of cross-validation folds\nK = 10\n\n# Create a K-fold cross-validation object\nkf = KFold(n_splits=K, shuffle=True, random_state=SEED)\n\n# Create pipelines for Ridge regression, Lasso regression, Elastic Net regression, Support Vector Regression, Gradient Boosting Regression, LightGBM Regression, and XGBoost Regression\n\n# Ridge regression with cross-validation\nridge = make_pipeline(RobustScaler(), RidgeCV(alphas=np.arange(14.5, 15.6, 0.1), cv=kf))\n\n# Lasso regression with cross-validation\nlasso = make_pipeline(RobustScaler(), LassoCV(alphas=np.arange(0.0001, 0.0009, 0.0001), random_state=SEED, cv=kf))\n\n# Elastic Net regression with cross-validation\nelasticnet = make_pipeline(RobustScaler(), ElasticNetCV(alphas=np.arange(0.0001, 0.0008, 0.0001), l1_ratio=np.arange(0.8, 1, 0.025), cv=kf))\n\n# Support Vector Regression\nsvr = make_pipeline(RobustScaler(), SVR(C=20, epsilon=0.008, gamma=0.0003))\n\n# Gradient Boosting Regression\ngbr = GradientBoostingRegressor(n_estimators=700, \n                                learning_rate=0.01, \n                                max_depth=4, \n                                max_features='sqrt', \n                                min_samples_leaf=15, \n                                min_samples_split=10, \n                                loss='huber', \n                                random_state=SEED)\n\n# LightGBM Regression\nlgbmr = LGBMRegressor(objective='regression', \n                      num_leaves=4, \n                      learning_rate=0.01, \n                      n_estimators=750, \n                      max_bin=200, \n                      bagging_fraction=0.75, \n                      bagging_freq=5, \n                      bagging_seed=SEED, \n                      feature_fraction=0.2, \n                      feature_fraction_seed=SEED, \n                      verbose=0)\n\n# XGBoost Regression\nxgbr = XGBRegressor(learning_rate=0.01, \n                    n_estimators=700, \n                    max_depth=3, \n                    gamma=0.001, \n                    subsample=0.7, \n                    colsample_bytree=0.7, \n                    objective='reg:squarederror', \n                    nthread=-1, \n                    seed=SEED, \n                    reg_alpha=0.0001)\n\n# StackingCVRegressor\nstack = StackingCVRegressor(regressors=(ridge, lasso, elasticnet, svr, gbr, lgbmr), meta_regressor=xgbr, use_features_in_secondary=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:47.089677Z","iopub.execute_input":"2024-08-31T15:54:47.090134Z","iopub.status.idle":"2024-08-31T15:54:47.105719Z","shell.execute_reply.started":"2024-08-31T15:54:47.09007Z","shell.execute_reply":"2024-08-31T15:54:47.104364Z"},"trusted":true},"execution_count":88,"outputs":[]},{"cell_type":"markdown","source":"# Create Dictionaries","metadata":{}},{"cell_type":"code","source":"# Create a dictionary to store the models\nmodels = {'RidgeCV': ridge,\n          'LassoCV': lasso, \n          'ElasticNetCV': elasticnet,\n          'SupportVectorRegressor': svr, \n          'GradientBoostingRegressor': gbr, \n          'LightGBMRegressor': lgbmr, \n          'XGBoostRegressor': xgbr,\n          'StackingCVRegressor': stack}\n\n# Initialize dictionaries for predictions and scores\npredictions = {}\nscores = {}\n","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:47.107498Z","iopub.execute_input":"2024-08-31T15:54:47.108022Z","iopub.status.idle":"2024-08-31T15:54:47.120882Z","shell.execute_reply.started":"2024-08-31T15:54:47.107943Z","shell.execute_reply":"2024-08-31T15:54:47.119703Z"},"trusted":true},"execution_count":89,"outputs":[]},{"cell_type":"code","source":"\"\"\"\n  Here we train all the models in the 'models' dictionary.\n  It prints start and end times for each model to track training duration.\n\"\"\"\nfor name, model in models.items():\n    start = datetime.now()\n    print('[{}] Running {}'.format(start, name))\n    model.fit(X_train, y)\n    end = datetime.now()\n    print('[{}] Finished Running {} in {:.2f}s'.format(end, name, (end - start).total_seconds()))\n\n\"\"\"\n  This function takes features (X) as input and performs a weighted blend prediction\n  using the models in the 'models' dictionary. Each model's prediction is weighted\n  according to the specified coefficients and then averaged.\n\"\"\"\ndef blend_predict(X):\n    return ((0.1 * elasticnet.predict(X)) + \n            (0.05 * lasso.predict(X)) +\n            (0.1 * ridge.predict(X)) +\n            (0.1 * svr.predict(X)) +\n            (0.1 * gbr.predict(X)) +\n            (0.15 * xgbr.predict(X)) +\n            (0.1 * lgbmr.predict(X)) +\n            (0.3 * stack.predict(X)))","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:54:47.122641Z","iopub.execute_input":"2024-08-31T15:54:47.123156Z","iopub.status.idle":"2024-08-31T15:56:14.407427Z","shell.execute_reply.started":"2024-08-31T15:54:47.123096Z","shell.execute_reply":"2024-08-31T15:56:14.40598Z"},"trusted":true},"execution_count":90,"outputs":[{"name":"stdout","text":"[2024-08-31 15:54:47.133498] Running RidgeCV\n[2024-08-31 15:54:48.278850] Finished Running RidgeCV in 1.15s\n[2024-08-31 15:54:48.279471] Running LassoCV\n[2024-08-31 15:54:48.405338] Finished Running LassoCV in 0.13s\n[2024-08-31 15:54:48.405463] Running ElasticNetCV\n[2024-08-31 15:54:49.051797] Finished Running ElasticNetCV in 0.65s\n[2024-08-31 15:54:49.052454] Running SupportVectorRegressor\n[2024-08-31 15:55:03.835968] Finished Running SupportVectorRegressor in 14.78s\n[2024-08-31 15:55:03.836152] Running GradientBoostingRegressor\n[2024-08-31 15:55:03.896370] Finished Running GradientBoostingRegressor in 0.06s\n[2024-08-31 15:55:03.896446] Running LightGBMRegressor\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[2024-08-31 15:55:03.919538] Finished Running LightGBMRegressor in 0.02s\n[2024-08-31 15:55:03.919605] Running XGBoostRegressor\n[2024-08-31 15:55:03.959118] Finished Running XGBoostRegressor in 0.04s\n[2024-08-31 15:55:03.959182] Running StackingCVRegressor\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[2024-08-31 15:56:14.403058] Finished Running StackingCVRegressor in 70.44s\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Predict and Save Results","metadata":{}},{"cell_type":"code","source":"# Make predictions on the test data using weighted blending\npreds_test = blend_predict(test)\n\n# Convert predictions to integers\npreds_test = [int(round(x)) for x in preds_test]\n\n# Convert integers values to boolean\npreds_test_bool = [True if pred == 1 else False for pred in preds_test]\n\n# Save test predictions to file\noutput = pd.DataFrame({'PassengerId': test.index,'Transported': preds_test_bool})\noutput.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T15:56:14.409054Z","iopub.execute_input":"2024-08-31T15:56:14.40958Z","iopub.status.idle":"2024-08-31T15:56:17.15768Z","shell.execute_reply.started":"2024-08-31T15:56:14.409537Z","shell.execute_reply":"2024-08-31T15:56:17.156495Z"},"trusted":true},"execution_count":91,"outputs":[{"name":"stdout","text":"[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n[LightGBM] [Warning] feature_fraction is set=0.2, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.2\n[LightGBM] [Warning] bagging_fraction is set=0.75, subsample=1.0 will be ignored. Current value: bagging_fraction=0.75\n[LightGBM] [Warning] bagging_freq is set=5, subsample_freq=0 will be ignored. Current value: bagging_freq=5\n","output_type":"stream"}]}]}